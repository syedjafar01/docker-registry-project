apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: docker-registry
  name: docker-registry
spec:
  ports:
  - name: "5000"
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    io.kompose.service: docker-registry
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: docker-registry
  name: docker-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: docker-registry
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: docker-registry
    spec:
      containers:
      - env:
        - name: REGISTRY_AUTH
          value: htpasswd
        - name: REGISTRY_AUTH_HTPASSWD_PATH
          value: /auth/htpasswd
        - name: REGISTRY_AUTH_HTPASSWD_REALM
          value: Registry Realm
        - name: REGISTRY_HTTP_TLS_CERTIFICATE
          value: /certs/domain.crt
        - name: REGISTRY_HTTP_TLS_KEY
          value: /certs/domain.key
        image: registry:2
        imagePullPolicy: ""
        name: syed-docker-registry
        ports:
        - containerPort: 5000
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/registry
          name: img-volume
        - mountPath: /certs
          name: certs-volume
        - mountPath: /auth
          name: auth-volume
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: img-volume
        persistentVolumeClaim:
          claimName: img-volume
      - name: certs-volume
        persistentVolumeClaim:
          claimName: certs-volume
      - name: auth-volume
        persistentVolumeClaim:
          claimName: auth-volume
status: {}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    type: local
  name: auth-volume
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 10Gi
  claimRef:
    kind: PersistentVolumeClaim
    name: auth-volume
    namespace: default
  hostPath:
    path: /Users/syed/work/kubernetes/docker-registry/auth
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    type: local
  name: certs-volume
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 10Gi
  claimRef:
    kind: PersistentVolumeClaim
    name: certs-volume
    namespace: default
  hostPath:
    path: /Users/syed/work/kubernetes/docker-registry/certs
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    type: local
  name: img-volume
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 10Gi
  claimRef:
    kind: PersistentVolumeClaim
    name: img-volume
    namespace: default
  hostPath:
    path: /Users/syed/work/kubernetes/docker-registry/volume
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: auth-volume
  name: auth-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: certs-volume
  name: certs-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: img-volume
  name: img-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
status: {}
